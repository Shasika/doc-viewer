import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as n,o}from"./app-CpSlSoOQ.js";const i={};function s(r,e){return o(),t("div",null,e[0]||(e[0]=[n(`<h1 id="conventional-commits-complete-developer-guide" tabindex="-1"><a class="header-anchor" href="#conventional-commits-complete-developer-guide"><span>Conventional Commits: Complete Developer Guide</span></a></h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>Conventional Commits is a lightweight convention on commit message formatting that enables automated<br> versioning, changelogs, and improved team collaboration. It is especially useful when working in projects<br> that follow Semantic Versioning (SemVer).</p><p><strong>Official Specification</strong>: <a href="https://www.conventionalcommits.org/en/v1.0.0" target="_blank" rel="noopener noreferrer">https://www.conventionalcommits.org/en/v1.0.0</a></p><h2 id="why-use-conventional-commits" tabindex="-1"><a class="header-anchor" href="#why-use-conventional-commits"><span>Why Use Conventional Commits?</span></a></h2><ul><li>Automate changelogs and releases</li><li>Improve commit readability and traceability</li><li>Enable automatic semantic versioning</li><li>Simplify collaboration across teams</li><li>Works with tools like <code>semantic-release</code>, <code>standard-version</code>, <code>commitlint</code></li></ul><h2 id="format-structure" tabindex="-1"><a class="header-anchor" href="#format-structure"><span>Format Structure</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>&lt;type&gt;[optional scope][!]: &lt;description&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[optional body]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[optional footer(s)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="header-required" tabindex="-1"><a class="header-anchor" href="#header-required"><span>Header (Required)</span></a></h3><ul><li><code>type</code> : Describes the nature of the change.</li><li><code>scope</code> : (Optional) Module or context (e.g., component, service).</li><li><code>!</code> : (Optional) Indicates a breaking change.</li><li><code>description</code> : Short summary in present tense.</li></ul><h3 id="body-optional" tabindex="-1"><a class="header-anchor" href="#body-optional"><span>Body (Optional)</span></a></h3><p>Provides more context about the change. Explains the reasoning or what changed.</p><h3 id="footer-optional" tabindex="-1"><a class="header-anchor" href="#footer-optional"><span>Footer (Optional)</span></a></h3><p>Used for breaking change details or linking to issues.</p><hr><h2 id="types-and-when-to-use-them" tabindex="-1"><a class="header-anchor" href="#types-and-when-to-use-them"><span>Types and When to Use Them</span></a></h2><h3 id="_1-feat-–-feature" tabindex="-1"><a class="header-anchor" href="#_1-feat-–-feature"><span>1. feat – Feature</span></a></h3><p>Example: <code>feat(auth): add OTP-based login support</code></p><h3 id="_2-fix-–-bug-fix" tabindex="-1"><a class="header-anchor" href="#_2-fix-–-bug-fix"><span>2. fix – Bug Fix</span></a></h3><p>Example: <code>fix(payment): resolve duplicate transaction issue</code></p><h3 id="_3-docs-–-documentation" tabindex="-1"><a class="header-anchor" href="#_3-docs-–-documentation"><span>3. docs – Documentation</span></a></h3><p>Example: <code>docs(readme): add API usage examples</code></p><h3 id="_4-style-–-formatting" tabindex="-1"><a class="header-anchor" href="#_4-style-–-formatting"><span>4. style – Formatting</span></a></h3><p>Example: <code>style(ui): format sidebar component with Prettier</code></p><h3 id="_5-refactor-–-code-refactoring" tabindex="-1"><a class="header-anchor" href="#_5-refactor-–-code-refactoring"><span>5. refactor – Code Refactoring</span></a></h3><p>Example: <code>refactor(user): extract auth logic into separate service</code></p><h3 id="_6-perf-–-performance-improvements" tabindex="-1"><a class="header-anchor" href="#_6-perf-–-performance-improvements"><span>6. perf – Performance Improvements</span></a></h3><p>Example: <code>perf(image): optimize loading of homepage banner</code></p><h3 id="_7-test-–-tests" tabindex="-1"><a class="header-anchor" href="#_7-test-–-tests"><span>7. test – Tests</span></a></h3><p>Example: <code>test(api): add unit tests for quote endpoint</code></p><h3 id="_8-chore-–-maintenance-meta-tasks" tabindex="-1"><a class="header-anchor" href="#_8-chore-–-maintenance-meta-tasks"><span>8. chore – Maintenance/Meta Tasks</span></a></h3><p>Example: <code>chore(env): update .env.example file</code></p><h3 id="_9-build-–-build-system" tabindex="-1"><a class="header-anchor" href="#_9-build-–-build-system"><span>9. build – Build System</span></a></h3><p>Example: <code>build(deps): upgrade Laravel to 11.x</code></p><h3 id="_10-ci-–-continuous-integration" tabindex="-1"><a class="header-anchor" href="#_10-ci-–-continuous-integration"><span>10. ci – Continuous Integration</span></a></h3><p>Example: <code>ci(github): add test matrix for multiple PHP versions</code></p><h3 id="_11-breaking-change-–-breaking-changes" tabindex="-1"><a class="header-anchor" href="#_11-breaking-change-–-breaking-changes"><span>11. BREAKING CHANGE – Breaking Changes</span></a></h3><p>Header: <code>feat!: drop support for legacy API authentication</code></p><p>Footer:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>BREAKING CHANGE: login endpoint now requires multi-factor authentication.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="real-world-examples" tabindex="-1"><a class="header-anchor" href="#real-world-examples"><span>Real-World Examples</span></a></h2><ul><li><code>feat(manual-renewal): add support for marketing preference keys</code></li><li><code>fix(api): add missing catch point keys to request</code></li><li><code>chore(manual-renewal): update content keys for sidebar</code></li><li><code>docs(changelog): update unreleased section with manual-renewal feature</code></li></ul><hr><h2 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h2><ul><li>Use present tense (e.g., add, fix, remove)</li><li>Use clear descriptions (~70 characters max)</li><li>Use scopes: <code>feat(api): ...</code></li><li>Add <code>BREAKING CHANGE:</code> in footer or <code>!</code> in header for breaking changes</li></ul><hr><h2 id="tooling-support" tabindex="-1"><a class="header-anchor" href="#tooling-support"><span>Tooling Support</span></a></h2><ol><li><strong>commitlint</strong> – Validates commit messages</li><li><strong>semantic-release</strong> – Automates versions &amp; changelogs</li><li><strong>Husky</strong> – Git hooks for pre-commit linting</li></ol><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Adopting Conventional Commits:</p><ul><li>Makes commit history clearer</li><li>Enables automated releases</li><li>Helps team collaboration</li></ul><p>Stick to the format, choose correct type, and keep it clean!</p>`,54)]))}const d=a(i,[["render",s]]),p=JSON.parse('{"path":"/tech-docs/git/conventional-commits.html","title":"Conventional Commits","lang":"en-US","frontmatter":{"title":"Conventional Commits","description":"Conventional Commits: Complete Developer Guide Overview Conventional Commits is a lightweight convention on commit message formatting that enables automated versioning, changelo...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Conventional Commits\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-18T15:55:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/tech-docs/git/conventional-commits.html"}],["meta",{"property":"og:site_name","content":"Docs Demo"}],["meta",{"property":"og:title","content":"Conventional Commits"}],["meta",{"property":"og:description","content":"Conventional Commits: Complete Developer Guide Overview Conventional Commits is a lightweight convention on commit message formatting that enables automated versioning, changelo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-07-18T15:55:25.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-18T15:55:25.000Z"}]]},"git":{"createdTime":1752854125000,"updatedTime":1752854125000,"contributors":[{"name":"Shasika Madhushan","username":"","email":"shasikamadushan555@gmail.com","commits":1}]},"readingTime":{"minutes":1.34,"words":402},"filePathRelative":"tech-docs/git/conventional-commits.md","autoDesc":true}');export{d as comp,p as data};
